	.title	SABOT2
	.mcall	.setto .print .exit
	.list	MEB
	.enabl	LC

; CPU RAM addrs
C_MAX_RAM	=: 124000
PpuAddr		=: C_MAX_RAM
PpuComm		=: C_MAX_RAM+2
PpuData		=: C_MAX_RAM+4
PpuKeys		=: C_MAX_RAM+6

; PPU Misc
C_VADDR		=: 100000
C_SCRWID	=: 80.
C_VEMPTY1	=: 286.*C_SCRWID+C_VADDR
C_PORT_AY1	=: 177360

SCREEN 		=: C_VADDR
SCRTOP 		=: SCREEN+4

; keys scancodes
C_KEY_RIGHT	= 133
C_KEY_LEFT	= 116
C_KEY_UP	= 154
C_KEY_DOWN	= 134
C_KEY_SHIFT	= 105
C_KEY_STOP	= 4

TILES_DX	=: 32.
TILES_DY	=: 18.

TILE_DY		=: 8.

C_TILES_PPU	=: 32.			; tiles buffer size to draw

C_PPU_EXIT      =: 177777		; exit PPU code
C_PPU_INITILE	=: 1			; init tiles draw routine
C_PPU_PALETTE1	=: 2			; set normal (title) palette
C_PPU_PALETTE2	=: 3			; set second (game) palette
C_PPU_MUSIC0	=: 4			; music #0 init
C_PPU_MUSIC1	=: 5			; music #1 init
C_PPU_PLAY	=: 6			; play one frame of music
C_PPU_MUTE	=: 7			; mute music
C_PPU_SOUND0	=: 8.
C_PPU_SOUND1	=: 9.
C_PPU_SOUND2	=: 10.
C_PPU_SOUND3	=: 11.
C_PPU_SOUND4	=: 12.
C_PPU_SOUND5	=: 13.
C_PPU_SOUND6	=: 14.
C_PPU_SOUND7	=: 15.

P_KEY_UP	=: 001
P_KEY_RIGHT	=: 002
P_KEY_DOWN	=: 004
P_KEY_LEFT	=: 010
P_KEY_FIRE	=: 060 ; 2 buttons 'fire' (40) and 'key A' (20)
P_KEY_STOP	=: 200


	.asect
	.=1000

Start:	mtps	#200				; stop right there, you interrupts
	mov	#1000, SP			; just in case
	; check RT11 presence
	tst	@#54
	beq	10$
	.setto	#C_MAX_RAM+6
	cmp	R0, #C_MAX_RAM+6
	beq	10$
	.print	#MsgMem
	.exit
10$:	; launch PPU first
	mov	#177777, PpuComm
	clr	PpuData
	clr	PpuKeys
	call	RunPpu
	tst	PpuComm
	bne	.-4
	; wait a bit
	clr	R0
	sob	R0, .
	; relocate CPU unpacker and code
	mov	#UnpackEnd, R0
	mov	#C_MAX_RAM, R1
	mov	#UnpackEnd-CpuData/2, R3
	mov	-(R0), -(R1)
	sob	R3, .-2
	; unpack and run CPU
	jmp	@#C_MAX_RAM-UnpackEnd+UnpackRun	

MsgMem:	.asciz	"(!) unable to get memory (135000)"
	.even

; //////////////////////////////////////////////////////////////////////////////
; // CPU packed data and unpacker
; //////////////////////////////////////////////////////////////////////////////

CpuData:
	@includebin _stcore.zx0.bin
	.even
CpuDataEnd:

; unpack and run CPU
UnpackRun:
	mov	#C_MAX_RAM-UnpackEnd+CpuData, R0
	mov	SP, R1
	call	@#C_MAX_RAM-UnpackEnd+Unpack
	jmp	(SP)

Unpack:	clr	R2
	movb	#200, R3
	sxt	R5
10$:	call	50$
	movb	(R0)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcs	30$
	call	50$
20$:	mov	R1, R4
	add	R5, R4
	movb	(R4)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcc	10$
30$:	mov	#-2, R2
	call	60$
	incb	R2
	bne	.+4
40$:	return
	swab	R2
	mov	R2, R5
	clrb	R5
	bisb	(R0)+, R5
	asr	R5
	mov	#1, R2
	bcs	.+6
	call	80$
	inc	R2
	br	20$
50$:	incb	R2
60$:	aslb	R3
	bne	70$
	movb	(R0)+, R3
	rolb	R3
70$:	bcs	40$
80$:	aslb	R3
	rol	R2
	br	60$
UnpackEnd:

; //////////////////////////////////////////////////////////////////////////////
; // Utils
; //////////////////////////////////////////////////////////////////////////////

; channel 2 data
PPmsg:	.word	PPArr
        .word	177777
PPArr:	.byte	0				; 23334 return value (0 - OK)
PPCmd:	.byte	1				; 23335 command (1 - allocate)
PPDev:	.word	32				; 23336 device type (0x-FD, 32-ppu mem)
PPApp:	.word	0				; 23340 argument(s) (PPU addr for mem operations)
PPAcp:	.word	End-PpuStart/2			; 23342 CPU addr (length in words for mem allocate)
PPLen:	.word	End-PpuStart/2			; 23344 length in words

; send to PPU by channel 2
PPSen:	mov	#PPMsg, R2
	mov	#5, R3
	br	20$
10$:	movb	(R2)+, @#176676
20$:	tstb	@#176674
	bpl	20$
	sob	R3, 10$
	return

; run code, wait for execution
RunPpu:	call	PPSen				; allocate (!) no testing for success
	mov	PPApp, PpuAddr			; copy allocated PPU addr for later use
	movb	#20, PPCmd			; copy mem CPU -> PPU
	mov	#PpuStart, PPAcp		; adjust start addr (there was mem size for allocate)
	call	PPSen				;
	movb	#30, PPCmd			; run
	br	PPSen				;

; //////////////////////////////////////////////////////////////////////////////
; // PPU
; //////////////////////////////////////////////////////////////////////////////

PpuStart:
	mtps	#200
	; stop FD (? do we need that ?)
	clr	R0
	call	@7132(R0)
	; backup and clean low addrs except 272
	mov	PC, R0
	add	#Bkp-., R0
	clr	R1
	mov	#400, R3
10$:	mov	(R1), (R0)+
	cmp	R1, #272
	bne	20$
	tst	(R1)+
	br	30$
20$:	clr	(R1)+
30$:	sob	R3, 10$
	mov	#2, (R3)			; set RTI at @#0

	; unpack music routines to fixed addrs
	mov	PC, R0
	add	#MusicZx0-., R0
	mov	#60000, R1
	call	PpuUnpack

ClearVdata:
	call	ClearScreen
	call	SetVLines
	mov	-4(SP), @#272

	; unpack red
	mov	#TitlePicR, R0
	mov	#177014, R1
	call	PUnpackVram
	; unpack green
	mov	#TitlePicG, R0
	mov	#177015, R1
	call	PUnpackVram
	; unpack blue
	mov	#TitlePicB, R0
	mov	#177012, R1
	call	PUnpackVram


; setup other
SetOther:
	mov	@#177054, Bkp054
	; timers
	bic	#^B0000001000000000, @#177054	; enable vsync in CPU
	bic	#^B0000000100000000, @#177054	; enable vsync in PPU
	bic	#^B0001111110000000, @#177716	; sound init (mixer off)
	mov	#200, @#306			; psw for ppu timer interrupt
	; keyboard
	mov	PC, R0
	add	#KeyInt-., R0
	mov	R0, @#300
	bis	#100, @#177700			; allow keyboard interrupts
	; maybe joystick
	mov	#175, @#177103			; LPT B to output, A,C to input
	; vsync
	mov	PC, R0
	add	#VsyInt-., R0
	mov	R0, @#100
	mov	#200, @#102
	; check AY presence
	mov	PC, R0
	add	#Int4-., R0
	mov	R0, @#4
	mov	#177777, R0
	tst	@#C_PORT_AY1
	mov	R0, HaveAY
	clr	@#4
	; setup scr index to vaddr
	clr	R0
	mov	PC, R5
	add	#ScrIdxTable-., R5
	mov	#TILES_DX*TILES_DY, R3
10$:	mov	R0, R1
	mov	R0, R2
	ash	#-5, R1				; divide by 32
	mul	#TILE_DY*C_SCRWID, R1		; tile DY is 10. screen lines
	bic	#^B1111111111100000, R2
	add	R2, R1
	add	#SCRTOP, R1
	mov 	R1, (R5)+
	inc	R0
	sob	R3, 10$


Done:	mtps	#0				; 
	mov	#PpuComm/2, @#177010		; ackn of command execution
	clr	@#177014			;

Main:	call	DrawTiles			; 
	mov	#PpuComm/2, @#177010		; get command from CPU
	mov	@#177014, R0			;
	beq	Main				; no command
	bmi	Exit				; exit PPU command
	asl	R0
	asl	R0
	add	R0, PC
	jmp	Main				; 0
	jmp	InitTiles			; 1
	jmp	SetPalette1			; 2
	jmp	SetPalette2			; 3
	jmp	InitMusic0			; 4
	jmp	InitMusic1			; 5
	jmp	PlayMusic			; 6
	jmp	MuteMusic			; 7
	jmp	Sound0				; 8.
	jmp	Sound1				; 9.
	jmp	Sound2				; 10.
	jmp	Sound3				; 11.
	jmp	Sound4				; 12.
	jmp	Sound5				; 13.
	jmp	Sound6				; 14.
	jmp	Sound7				; 15.
	; ...

Exit:	mtps	#200
	call	ClearScreen
	; restore 0..1000
	mov	PC, R0
	add	#Bkp-., R0
	clr	R1
	mov	#400, R3
	mov	(R0)+, (R1)+
	sob	R3, .-2
	mov	Bkp054, @#177054
	; signal to CPU
	mov	#PpuComm/2, @#177010
	clr	@#177014
	mtps	#0
	return


; keys int - india style code
KeyInt:	mov	@#177010, -(SP)
	mov	R0, -(SP)
	mov	#PpuKeys/2, @#177010		; prepare addr of keys in CPU
	movb	@#177702, R0			; scancode (read it just once)
	bmi	50$
	; key pressed
	cmp	R0, #C_KEY_LEFT
	bne	11$
	bis	#P_KEY_LEFT, @#177014
	br	90$
11$:	cmp	R0, #C_KEY_RIGHT
	bne	12$
	bis	#P_KEY_RIGHT, @#177014
	br	90$
12$:	cmp	R0, #C_KEY_UP
	bne	13$
	bis	#P_KEY_UP, @#177014
	br	90$
13$:	cmp	R0, #C_KEY_DOWN
	bne	14$
	bis	#P_KEY_DOWN, @#177014
	br	90$
14$:	cmp	R0, #C_KEY_SHIFT
	bne	15$
	bis	#P_KEY_FIRE, @#177014
	br	90$
15$:	cmp	R0, #C_KEY_STOP
	bne	90$
	bis	#P_KEY_STOP, @#177014
	br	90$
50$:	; key released
	bic	#^B1111111111110000, R0
	cmp	R0, #^B1110			; left
	bne	51$
	bic	#P_KEY_LEFT, @#177014
	br	90$
51$:	cmp	R0, #^B1011			; right
	bne	52$
	bic	#P_KEY_RIGHT, @#177014
	br	90$
52$:	cmp	R0, #^B1100			; up down
	bne	53$
	bic	#P_KEY_UP+P_KEY_DOWN, @#177014
	br	90$
53$:	cmp	R0, #^B0101			; shift
	bne	90$
	bic	#P_KEY_FIRE, @#177014	
90$:	; exit int
	mov	(SP)+, R0
	mov	(SP)+, @#177010
	rti


; initialize tiles draw routine
InitTiles:
	mov	#PpuData/2, @#177010
	mov	@#177014, TileBufAddr
	jmp	Done


; draw tiles routine
DrawTiles:
	mov	TileBufAddr, R0			; check init
	beq	99$				; not initialized yet
	mov	R0, -(SP)			; 2(SP) - tile buf addr in CPU/2	
	mov	PC, -(SP)			; get temp buf addr
	add	#TempBuf-., (SP)		; 0(SP) - temp buf addr
	mov	#177010, R4			; mem index
	mov	#177014, R5			; mem data
	mov	#177024, R3			; pix data
	mov	#C_TILES_PPU, 91$+2		; tiles max
10$:	; tiles cycle
	mov	2(SP), (R4)			; tile buf addr in CPU/2
	mov	(R5), R1			; check screen index
	bmi	90$				; nothing to draw
	; copy tile data (8 bytes) to temp buf here
	mov	(SP), R2			; temp buf addr here
	inc	(R4)				; skip screen index
	.rept	4.
	mov	(R5), R0
	mov	R0, (R2)+
	swab	R0
	mov	R0, (R2)+
	inc	(R4)
	.endr
	mov	(R5), R0			; ZX attr byte
	mov	R0, @#177016			; set 'ink' color
	asr	R0
	bic	#^B1111111111100011, R0
	add	PC, R0
	add	#BackClrTbl-., R0
	mov	(R0)+, @#177020			; set 'paper' color
	mov	(R0)+, @#177022
	; convert screen index to vaddr
	asl	R1
	add	PC, R1
	mov	ScrIdxTable-.(R1), (R4)
	; copy temp buf to screen
	mov	(SP), R2
	mov	#C_SCRWID, R1
	.rept	8.
	mov	(R2)+, (R3)
	add	R1, (R4)
	.endr
	; mark as drawn
	mov	2(SP), (R4)
	mov	#177777, (R5)
90$:	; cycle 
	add	#6., 2(SP)
91$:	dec	#000000
	bne	10$
	tst	(SP)+
	tst	(SP)+
99$:	return


; vsync int
VsyInt:	inc	(PC)+
VsyCnt:	.word	0
	; LPT joystick
	mov	R0, -(SP)
	mov	R1, -(SP)
	mov	#237, @#177102
	mov	@#177101, R1				; A, Start + mask #12
	mov	#277, @#177102
	mov	@#177101, R0				; arrows and B C
	comb	R0
	beq	99$					; no joystick at all
	comb	R0					; joystick sends inverted codes
	tst	HaveJoy
	beq	90$
	; seems we have joystick
	mov	R2, -(SP)
	mov	@#177010, -(SP)
	mov	#PpuKeys/2, @#177010
	mov	@#177014, R2
	clrb	R2
	; up
	bit	#1, R0
	beq	10$
	bis	#P_KEY_UP, R2
10$:	; right
	bit	#2, R0
	beq	20$
	bis	#P_KEY_RIGHT, R2
20$:	; down
	bit	#4, R0
	beq	30$
	bis	#P_KEY_DOWN, R2
30$:	; left
	bit	#10, R0
	beq	40$
	bis	#P_KEY_LEFT, R2
40$:	; B
	bit	#40, R0
	beq	50$
	bis	#P_KEY_FIRE, R2
50$:	; start (it's stop here ^_^)
	bit	#100, R1
	beq	60$
	bis	#P_KEY_STOP, R2
60$:	; store in keys word (CPU)
	mov	R2, @#177014
	mov	(SP)+, @#177010
	mov	(SP)+, R2
	br	99$
90$:	mov	R0, HaveJoy
99$:	mov	(SP)+, R1
	mov	(SP)+, R0
	rti


; temporary trap 4
Int4:	clr	R0
	rti


; clear screen vdata
ClearScreen:
	mov	#177010, R4
	mov	#177012, R3
	mov	#177014, R5
	mov	#100000, (R4)
	mov	#100000, R0
10$:	clr	(R5)
	clr	(R3)
	inc	(R4)
	sob	R0, 10$
	return


; setup lines table
SetVlines:
	mov	PC, R0
	add	#Lines+7-., R0
	bic	#7, R0				; R0 - line table start addr
	mov	R0, -(SP)			; save it
	mov	R0, PalAdr
	bis	#6, (SP)			; +6 means first line descriptor have color
	mov	#^B1011101010011000, (R0)+ 	; YRGB YRGB YRGB YRGB for colors 1st part
	mov	#^B1111111011011100, (R0)+	; YRGB YRGB YRGB YRGB for colors 2nd part
	clr	(R0)+				; vaddr not used for first 18 lines
	mov	R0, (R0)
	add	#2, (R0)
	bis	#2, (R0)+			; +2 means next line is scale&cursor
	mov	#^B0000000000010000, (R0)+	; black colored graph cursor
	mov	#^B0000000000010111, (R0)+	; max luminance (xxxDDxBGR, DD: 00-640, 01-320, 10-160, 11-80)
	clr	(R0)+				; vaddr still not needed
	mov	R0, (R0)
	add	#2, (R0)+			; +0 means next line is 2-word descriptor
	; 16. not used lines
	mov	#16., R3
10$:	clr	(R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 10$
	; first 48. empty lines
	mov	#48., R3
	mov	#C_VEMPTY1, R1			; sort of empty line addr
20$:	mov	R1, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 20$
	; 144. main lines (18. * 8.)
	mov	R0, VLinesStart
	mov	#C_VADDR, R1
	mov	#TILES_DY*TILE_DY, R3
30$:	mov	R1, (R0)+			; put vaddr
	mov	R0, (R0)			; put next element addr
	add	#2, (R0)+
	add	#C_SCRWID, R1			; advance vaddr
	sob	R3, 30$
	; 48. lines of info place
	bis	#6, -(R0)
	tst	(R0)+
	mov	R0, Palette2Addr
	mov	#^B1011111110011000, (R0)+
	mov	#^B1111101011011001, (R0)+
	mov	R1, (R0)+
	add	#C_SCRWID, R1			; advance vaddr
	mov	R0, (R0)
	add	#2, (R0)+
	mov	#47., R3
40$:	mov	R1, (R0)+			; put vaddr
	mov	R0, (R0)			; put next element addr
	add	#2, (R0)+
	add	#C_SCRWID, R1			; advance vaddr
	sob	R3, 40$
	; last 48. empty lines
	mov	#48., R3
	mov	#C_VEMPTY1, R1			; sort of empty line addr
90$:	mov	R1, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 90$
	; cycle last line for emustudio
	mov	R1, (R0)+
	mov	R0, (R0)
	sub	#4, (R0)
	add	#2, (R0)
	tst	(SP)+
	return


; set palette 1 (title screen palette)
; also copy second half of screen to the first half
SetPalette1:
	; fade out screen
	call	FadeOut
	; set palette
	mov	Palette2Addr, R0
	mov	#^B1011101010011000, (R0)+ 
	mov	#^B1111111011011100, (R0)+
	; fade in title
	call	DuplicateScreen
	jmp	Done


; set palette 2 (game palette)
; also clear first half of screen
SetPalette2:
	; fade out screen
	call	FadeOut
	; set palette
	mov	Palette2Addr, R0
	mov	#^B1011111110011000, (R0)+
	mov	#^B1111101011011001, (R0)+
	jmp	Done


; LFSR 8-bit random (Galois), 2^8-1 cycle
; cycle xor: 8-bit [10111000] 9-bit [110110000]
Random:	asr	#123
	bcc	30$
	mov	#^B0000000010111000, R0
	xor	R0, Random+2
30$:	mov	Random+2, R0
	return


; sets vregs and saddr
SetSAddr:
	mov	R0, R1
	bic	#^B1111111100001111, R1		; Y 0..15 * 16
	ash	#-4, R1
	mul	#12.*C_SCRWID, R1		; DY = 12.
	bic	#^B1111111111110000, R0		; X 0..15
	asl	R0				; 0..30
	add	R0, R1
	add	#C_VADDR+4, R1
	mov	#177010, R4
	mov	#177014, R5
	mov	R1, (R4)
	return


; clear cube on first half of screen
; R0 - s-addr
ClearKub:
	call	SetSAddr
	mov	#12., R3
10$:	clr	(R5)
	clr	@#177012
	inc	(R4)
	clr	(R5)
	clr	@#177012
	add	#C_SCRWID-1, (R4)
	sob	R3, 10$
	return


; copy cube from second half to  first half of screen
; R0 - s-addr
CopyKub:
	call	SetSAddr
	mov	#12., R3
	add	#40., (R4)
10$:	mov	(R5), R1
	mov	@#177012, R0
	sub	#40., (R4)
	mov	R1, (R5)
	mov	R0, @#177012
	add	#41., (R4)
	mov	(R5), R1
	mov	@#177012, R0
	sub	#40., (R4)
	mov	R1, (R5)
	mov	R0, @#177012
	add	#C_SCRWID-1+40., (R4)
	sob	R3, 10$
	return


; fade out screen
FadeOut:
	mov	#255., R2
10$:	call	Random
	call	ClearKub
	sob	R2, 10$
	clr	R0
	call	ClearKub
	return


; duplicate screen
DuplicateScreen:
	mov	#255., R2
10$:	call	Random
	call	CopyKub
	sob	R2, 10$
	clr	R0
	call	CopyKub
	return


; get byte (cpu addr) (R0) -> R1 and advance addr
PGetB12:	
	mov	R0, R1
	inc	R0
	clc
	ror	R1
	mov	R1, @#177010
	bcs	10$
	movb	@#177014, R1
	return
10$:	movb	@#177015, R1
	return


; put R0 -> byte to dest vaddr and advance it
PPutA12 = PPutB12 + 2
PPutB12:	
	mov	#100000, @#177010
	inc	PPutA12
PPutBad:	
	movb	R1, @#177014
	return


; unpacker version for vram picture unpack
; R0 - source addr in CPU mem
; R1 - reg addr to write output bytes (177012, 177014, 177015)
; unpacking to vram from index 100000
PUnpackVram:
	; prepare
	mov	#100000, PPutA12
	mov	R1, PPutBad+2
	mov	R1, 24$+2
	; unpack
	clr	R2
	movb	#200, R3
	sxt	R5
10$:	call	50$
	; movb	(R0)+, (R1)+
	; sob	R2, .-2
12$:	call	PGetB12
	call	PPutB12
	sob	R2, 12$
	; 
	aslb	R3
	bcs	30$
	call	50$
20$:	; mov	R1, R4
	; add	R5, R4
	; movb	(R4)+, (R1)+
	; sob	R2, .-2
	mov	PPutA12, R4
	add	R5, R4
22$:	mov	R4, @#177010
24$:	movb	@#177014, R1
	inc	R4
	call	PPutB12
	sob	R2, 22$
	;
	aslb	R3
	bcc	10$
30$:	mov	#-2, R2
	call	60$
	incb	R2
	bne	.+4
40$:	return
	swab	R2
	mov	R2, R5
	clrb	R5
	; bisb	(R0)+, R5
	call	PGetB12
	bisb	R1, R5
	;
	asr	R5
	mov	#1, R2
	bcs	.+6
	call	80$
	inc	R2
	br	20$
50$:	incb	R2
60$:	aslb	R3
	bne	70$
	; movb	(R0)+, R3
	rol	R4				; save C flag in R4
	call	PGetB12
	movb	R1, R3
	ror	R4				; restore C flag from R4
	;
	rolb	R3
70$:	bcs	40$
80$:	aslb	R3
	rol	R2
	br	60$


; ZX0 unpacker by reddie
PpuUnpack:
	clr	R2
	movb	#200, R3
	sxt	R5
10$:	call	50$
	movb	(R0)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcs	30$
	call	50$
20$:	mov	R1, R4
	add	R5, R4
	movb	(R4)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcc	10$
30$:	mov	#-2, R2
	call	60$
	incb	R2
	bne	.+4
40$:	return
	swab	R2
	mov	R2, R5
	clrb	R5
	bisb	(R0)+, R5
	asr	R5
	mov	#1, R2
	bcs	.+6
	call	80$
	inc	R2
	br	20$
50$:	incb	R2
60$:	aslb	R3
	bne	70$
	movb	(R0)+, R3
	rolb	R3
70$:	bcs	40$
80$:	aslb	R3
	rol	R2
	br	60$ 


; //////////////////////////////////////////////////////////////////////////////
; // Music
; //////////////////////////////////////////////////////////////////////////////

; init music #0 (if have AY device)
InitMusic0:
	tst	HaveAY
	beq	99$
	clr	R0
	clr	R1
	clr	R5
	call	@60000(R5)
99$:	jmp	Done


; init music #1 (game music)
InitMusic1:
	tst	HaveAY
	beq	99$
	mov	#1, R0
	mov	#1, R1
	clr	R5
	call	@60000(R5)
99$:	jmp	Done


; play one frame of current music
PlayMusic:
	tst	HaveAY
	beq	99$
	clr	R5
	call	@60002(R5)
99$:	jmp	Done


; mute music (if have AY device)
MuteMusic:
	tst	HaveAY
	beq	99$
	clr	R5
	call	@60004(R5)
99$:	jmp	Done


; //////////////////////////////////////////////////////////////////////////////
; // Sound
; //////////////////////////////////////////////////////////////////////////////

Sound0:	mov	#0, R0
	br	PlaySound
Sound1:	mov	#1, R0
	br	PlaySound
Sound2:	mov	#2, R0
	br	PlaySound
Sound3:	mov	#3, R0
	br	PlaySound
Sound4:	mov	#4, R0
	br	PlaySound
Sound5:	mov	#5, R0
	br	PlaySound
Sound6:	mov	#6, R0
	br	PlaySound
Sound7:	bis	#200, @#177716
	mov	#10., R0
	sob	R0, .
	bic	#200, @#177716
	jmp	Done

SoundAddr:	.word	0

; start sound
; R0 - sound #
PlaySound:
	jmp	Done

	call	TimerInit
	asl	R0				; to word
	add	PC, R0
	add	#SoundTable-., R0
	add	(R0), R0
	beq	99$
	clr	R1
	bisb	(R0)+, R1
	beq	99$
	mov	R0, SoundAddr
	mov	R1, @#177712			; load counter
	tst	@#177714
	tst	@#177714
	bic	#200, @#177716			; sound to LO
	mov	PC, @#304
	add	#SoundIntHi+2-., @#304		; set sound interrupt to HI
	mov	#^B01000001, @#177710		; allow int, start, timer = 4 mks
99$:	jmp	Done

; sound timer interrupt (LO)
SoundIntLo:
	bic	#200, @#177716
	mov	PC, @#304
	add	#SoundIntHi+2-., @#304
	br	SoundIntNext
; sound timer interrupt (HI)
SoundIntHi:
	bis	#200, @#177716
	mov	PC, @#304
	add	#SoundIntLo+2-., @#304
SoundIntNext:
	movb	@SoundAddr, @#177712		; update timer
	beq	90$				; end of sound?
	inc	SoundAddr
	tst	@#177714
	tst	@#177714
	rti
90$:	clr	@#177710			; stop timer and ints
	tst	@#177714
	tst	@#177714
	rti

; timer init (stop, clear counter)
TimerInit:
	clr	@#177710			; clear control, stop
	clr	@#177712			; clear buffer
	tst	@#177714
	tst	@#177714
	return

SoundTable:	.word	Snd000-., Snd001-., Snd002-., Snd003-., Snd004-., Snd005-., Snd006-.

.radix 10

; cat paw
Snd000:	.byte	10, 10, 14, 14, 22, 22, 26, 26, 32, 32, 36, 36, 40, 40, 44, 44 ; , 48, 48, 52, 52
	.byte	0

; guard kick
Snd001:	.byte	21, 15, 46, 29, 16, 11, 22, 21, 38, 26
	.byte	110, 135, 93, 42, 32, 126, 86, 70
	.byte	0

; guard punch
Snd002:	.byte	20,10, 30,10, 40,10
	.byte	0

; drop on floor
Snd003:	.byte	11, 18, 56, 89, 05, 06
	.byte	0

; switch console
Snd004:	.byte	020, 025, 024, 023, 021, 020, 025, 024, 023, 022, 021, 020
	.byte	020, 025, 024, 023, 021, 020, 025, 024, 023, 022, 021, 020
	.byte	025, 024, 023, 022
	.byte	080, 082, 081, 082, 082, 082, 082, 082, 082, 080, 080, 090
	.byte	080, 082, 081, 082, 082, 082, 082, 080
	.byte	120, 122, 124, 124, 122, 120, 122, 124, 124, 122, 122, 120
	.byte	120, 122, 124
	.byte	020, 025, 024, 023, 021, 020, 025, 024, 023, 022, 021, 020
	.byte	020, 025, 024, 023, 021, 020, 025, 024, 023, 022, 021, 020
	.byte	025, 024, 023, 022
	.byte	0

; dagger or bat hit (they are all missiles)
Snd005:	.byte	30,30, 30,30, 20,20
	.byte	0

; guard hit by Nina
Snd006:	.byte	21, 15, 27, 15, 46, 29, 16, 11, 22, 21, 38, 26, 36, 27, 30, 10
	.byte	188, 235, 143, 109, 54, 52, 52, 196, 116, 120, 136, 163
	.byte	0

	.even

.radix 8 


; //////////////////////////////////////////////////////////////////////////////
; // Data
; //////////////////////////////////////////////////////////////////////////////

BackClrTbl:	.word	^B0000000000000000, ^B0000000000000000
		.word	^B0001000100010001, ^B0001000100010001
		.word	^B0010001000100010, ^B0010001000100010
		.word	^B0011001100110011, ^B0011001100110011
		.word	^B0100010001000100, ^B0100010001000100
		.word	^B0101010101010101, ^B0101010101010101
		.word	^B0110011001100110, ^B0110011001100110
		.word	^B0111011101110111, ^B0111011101110111
TileBufAddr:	.word	0
TempBuf:	.blkw	8.

HaveJoy:	.word	0
HaveAY:		.word	177777
PalAdr:		.word	0
Pal1:		.word	^B1011101010011000
Pal2:		.word	^B1111111011011100
VLinesStart:	.word	0
Palette2Addr:	.word	0

Bkp054:		.word	0			; save 177054
Bkp710:		.word	0			; save 177710
Bkp:		.blkw	400			; 0-1000 addrs backup

Lines:		.blkw	288.+16.*2+8.+4.+16.	; 304 x 2-words + 2 x 4-words + 4 x 1-word (for align) + 16. words for something
ScrIdxTable:	.blkw	TILES_DX*TILES_DY	; screen index to vaddr table

; title picture R
.even
TitlePicR:
	@includebin ./graphics/sabot2title.zxr

; title picture G
.even
TitlePicG:
	@includebin ./graphics/sabot2title.zxg

; title picture B
.even
TitlePicB:
	@includebin ./graphics/sabot2title.zxb

; music routines packed data
.even
MusicZx0:
	@includebin _music.zx0.bin

End:
	.end	Start
